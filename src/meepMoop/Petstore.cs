//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace meepMoop
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using meepMoop.Hooks;
    using meepMoop.Models.Components;
    using meepMoop.Models.Errors;
    using meepMoop.Utils;
    using meepMoop.Utils.Retries;


    /// <summary>
    /// The environment name. Defaults to the production environment.
    /// </summary>
    public enum ServerEnvironment
    {
        [JsonProperty("prod")]
        Prod,
        [JsonProperty("staging")]
        Staging,
        [JsonProperty("dev")]
        Dev,
    }

    public static class ServerEnvironmentExtension
    {
        public static string Value(this ServerEnvironment value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ServerEnvironment ToEnum(this string value)
        {
            foreach(var field in typeof(ServerEnvironment).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ServerEnvironment)
                    {
                        return (ServerEnvironment)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ServerEnvironment");
        }
    }

    /// <summary>
    /// Petstore - OpenAPI 3.1: This is a sample Pet Store Server based on the OpenAPI 3.1 specification.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// Some useful links:<br/>
    /// - <a href="https://www.speakeasy.com/openapi">OpenAPI Reference</a><br/>
    /// - <a href="https://github.com/swagger-api/swagger-petstore">The Pet Store repository</a><br/>
    /// - <a href="https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml">The source API definition for the Pet Store</a>
    /// </remarks>
    /// 
    /// <see>http://swagger.io} - Find out more about Swagger</see>
    /// </summary>
    public interface IPetstore
    {

        /// <summary>
        /// Everything about your Pets
        /// 
        /// <see>http://swagger.io} - Find out more</see>
        /// </summary>
        public IPet Pet { get; }

        /// <summary>
        /// Access to Petstore orders
        /// 
        /// <see>http://swagger.io} - Find out more about our store</see>
        /// </summary>
        public IStore Store { get; }

        /// <summary>
        /// Operations about user
        /// </summary>
        public IUser User { get; }
    }


    /// <summary>
    /// Petstore - OpenAPI 3.1: This is a sample Pet Store Server based on the OpenAPI 3.1 specification.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// Some useful links:<br/>
    /// - <a href="https://www.speakeasy.com/openapi">OpenAPI Reference</a><br/>
    /// - <a href="https://github.com/swagger-api/swagger-petstore">The Pet Store repository</a><br/>
    /// - <a href="https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml">The source API definition for the Pet Store</a>
    /// </remarks>
    /// 
    /// <see>http://swagger.io} - Find out more about Swagger</see>
    /// </summary>
    public class Petstore: IPetstore
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.3";
        private const string _sdkGenVersion = "2.716.4";
        private const string _openapiDocVersion = "1.0.0";
        public IPet Pet { get; private set; }
        public IStore Store { get; private set; }
        public IUser User { get; private set; }

        public Petstore(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Pet = new Pet(SDKConfiguration);

            Store = new Store(SDKConfiguration);

            User = new User(SDKConfiguration);
        }

        public Petstore(string? apiKey = null, Func<string>? apiKeySource = null, int? serverIndex = null, ServerEnvironment? environment = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, IPetstoreHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<meepMoop.Models.Components.Security>? _securitySource = null;

            if(apiKeySource != null)
            {
                _securitySource = () => new meepMoop.Models.Components.Security() { ApiKey = apiKeySource() };
            }
            else if(apiKey != null)
            {
                _securitySource = () => new meepMoop.Models.Components.Security() { ApiKey = apiKey };
            }
            else
            {
                throw new Exception("apiKey and apiKeySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            if (environment != null)
            {
                SDKConfiguration.SetServerVariable("environment", ServerEnvironmentExtension.Value(environment.Value));
            }

            InitHooks();

            Pet = new Pet(SDKConfiguration);

            Store = new Store(SDKConfiguration);

            User = new User(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new PetstoreHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithEnvironment(ServerEnvironment environment)
            {
                _sdkConfig.SetServerVariable("environment", ServerEnvironmentExtension.Value(environment));
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithApiKeySource(Func<string> apiKeySource)
            {
                _sdkConfig.SecuritySource = () => new meepMoop.Models.Components.Security() { ApiKey = apiKeySource() };
                return this;
            }

            public SDKBuilder WithApiKey(string apiKey)
            {
                _sdkConfig.SecuritySource = () => new meepMoop.Models.Components.Security() { ApiKey = apiKey };
                return this;
            }

            public SDKBuilder WithClient(IPetstoreHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public Petstore Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `ApiKey` or `apiKeySource` needs to be defined.");
              }
              return new Petstore(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}