//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace meepMoop
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using meepMoop.Hooks;
    using meepMoop.Models.Components;
    using meepMoop.Utils;
    using meepMoop.Utils.Retries;

    public struct SDKConfig
    {
        /// <summary>
        /// List of server URLs available to the SDK.
        /// </summary>
        public static readonly string[] ServerList = {
            "https://{environment}.petstore.io",
        };

        public IPetstoreHttpClient Client;
        public string ServerUrl;
        public int ServerIndex;
        public List<Dictionary<string, string>> ServerVariables;
        public string UserAgent;
        public Func<meepMoop.Models.Components.Security>? SecuritySource;
        public SDKHooks Hooks;
        public RetryConfig? RetryConfig;

        /// <summary>
        /// Initializes a new instance of the SDKConfig struct with default values.
        /// </summary>
        public SDKConfig(IPetstoreHttpClient? client = null)
        {
            Client = client ?? new PetstoreHttpClient();
            ServerUrl = "";
            ServerIndex = 0;
            ServerVariables = new List<Dictionary<string, string>>()
            {
                new Dictionary<string, string>()
                {
                    {"environment", "prod"},
                },
            };
            UserAgent = "speakeasy-sdk/csharp 0.0.2 2.716.4 1.0.0 meepMoop";
            SecuritySource = null;
            Hooks = new SDKHooks();
            RetryConfig = null;
        }

        public void SetServerVariable(string key, string value)
        {
            foreach (var serverVariables in this.ServerVariables.Where(dict => dict.ContainsKey(key)))
            {
                serverVariables[key] = value;
            }
        }

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.ServerIndex], this.ServerVariables[this.ServerIndex]);
        }
    }
}